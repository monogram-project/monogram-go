name: Publish Monogram Binaries on Tag Push
permissions:
  contents: write  # Required to create releases and upload assets

on:
  push:
    tags:
      - "v*"  # Matches tags starting with "v"

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is available, including tags

      - name: Check Out Main Branch
        run: |
          git fetch origin main
          git checkout main

      - name: Extract Git Tag
        id: get_tag
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}"
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set Up Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.8"

      - name: Build Binaries
        run: |
          mkdir -p dist/linux/x86_64 dist/linux/arm64 dist/windows dist/macos/intel dist/macos/arm64
          cd ./cmd/monogram
          #
          GOOS=linux GOARCH=amd64 go build -tags withweb -o ../../dist/linux/x86_64/monogram
          GOOS=linux GOARCH=arm64 go build -tags withweb -o ../../dist/linux/arm64/monogram
          GOOS=windows GOARCH=amd64 go build -tags withweb -ldflags="-s -w" -o ../../dist/windows/monogram.exe
          GOOS=darwin GOARCH=amd64 go build -tags withweb -o ../../dist/macos/intel/monogram
          GOOS=darwin GOARCH=arm64 go build -tags withweb -o ../../dist/macos/arm64/monogram
          #
          GOOS=linux GOARCH=amd64 go build -o ../../dist/linux/x86_64/monogram-mini
          GOOS=linux GOARCH=arm64 go build -o ../../dist/linux/arm64/monogram-mini
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/windows/monogram-mini.exe
          GOOS=darwin GOARCH=amd64 go build -o ../../dist/macos/intel/monogram-mini
          GOOS=darwin GOARCH=arm64 go build -o ../../dist/macos/arm64/monogram-mini

      - name: Compress Binaries
        run: |
          tar -czvf dist/linux/x86_64/monogram-linux-x86_64.tar.gz -C dist/linux/x86_64 monogram monogram-mini
          tar -czvf dist/linux/arm64/monogram-linux-arm64.tar.gz -C dist/linux/arm64 monogram monogram-mini
          zip -j dist/windows/monogram-windows.zip dist/windows/monogram.exe dist/windows/monogram-mini.exe
          zip -j dist/macos/intel/monogram-macos-intel.zip dist/macos/intel/monogram dist/macos/intel/monogram-mini
          zip -j dist/macos/arm64/monogram-macos-arm64.zip dist/macos/arm64/monogram dist/macos/arm64/monogram-mini

      - name: Create Release Notes File
        run: |
          cat > release_notes.txt <<EOF
          Automatically generated release for version $TAG.

          ### Windows Binary

          The Windows binary is a self-contained executable. However, we are
          seeing some false positives from Windows Defender. If you encounter
          a warning, please let us know
          
          ### macOS Binary Notice
          
          **Important:** The macOS binaries in this release are not notarized. macOS security settings (Gatekeeper) will prevent them from running immediately.
          **Workarounds for newer macs:**
          See https://support.apple.com/en-gb/guide/mac-help/mh40616/mac
          
          **Workarounds for older macs:**
          - **Using Finder:** Right-click (or Control-click) the downloaded binary and select **Open**, then confirm.
          - **Using Terminal:** Run \`xattr -rd com.apple.quarantine /path/to/monogram\`
          EOF

      - name: Create Release and Upload Binaries with gh
        run: |
          gh release create "$TAG" \
            -t "Release $TAG" \
            -F release_notes.txt \
            -n "Automatically generated release for version $TAG." \
            dist/linux/x86_64/monogram-linux-x86_64.tar.gz \
            dist/linux/arm64/monogram-linux-arm64.tar.gz \
            dist/windows/monogram-windows.zip \
            dist/macos/intel/monogram-macos-intel.zip \
            dist/macos/arm64/monogram-macos-arm64.zip \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
